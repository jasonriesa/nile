/* Generated by Cython 0.11.2 on Thu Mar 18 08:54:32 2010 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
       void *buf;
       PyObject *obj;
       Py_ssize_t len;
       Py_ssize_t itemsize;
       int readonly;
       int ndim;
       char *format;
       Py_ssize_t *shape;
       Py_ssize_t *strides;
       Py_ssize_t *suboffsets;
       void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyBytes_Type
  #define PyString_CheckExact          PyBytes_CheckExact
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define PyBytes_Type                 PyString_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#else
  #define _USE_MATH_DEFINES
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__svector
#include "string"
#include "numberizer.hpp"
#include "cmath"
#include "svector.hpp"
#include "cy_svector.hpp"
#include "stdexcept"
#define __PYX_USE_C99_COMPLEX defined(_Complex_I)


#ifdef __GNUC__
#define INLINE __inline__
#elif _WIN32
#define INLINE __inline
#else
#define INLINE 
#endif

typedef struct {PyObject **p; char *s; long n; char is_unicode; char intern; char is_identifier;} __Pyx_StringTabEntry; /*proto*/



static int __pyx_skip_dispatch = 0;


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString          PyString_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyString_AsString
#else
#define __Pyx_PyBytes_FromString          PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyBytes_AsString
#endif

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

#if !defined(T_PYSSIZET)
#if PY_VERSION_HEX < 0x02050000
#define T_PYSSIZET T_INT
#elif !defined(T_LONGLONG)
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
#else
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
#endif
#endif

#if !defined(T_SIZET)
#if !defined(T_ULONGLONG)
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
#else
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
#endif
#endif

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;


#ifdef CYTHON_REFNANNY
typedef struct {
  void (*INCREF)(void*, PyObject*, int);
  void (*DECREF)(void*, PyObject*, int);
  void (*GOTREF)(void*, PyObject*, int);
  void (*GIVEREF)(void*, PyObject*, int);
  void* (*NewContext)(const char*, int, const char*);
  void (*FinishContext)(void**);
} __Pyx_RefnannyAPIStruct;
static __Pyx_RefnannyAPIStruct *__Pyx_Refnanny = NULL;
#define __Pyx_ImportRefcountAPI(name)   (__Pyx_RefnannyAPIStruct *) PyCObject_Import((char *)name, (char *)"RefnannyAPI")
#define __Pyx_INCREF(r) __Pyx_Refnanny->INCREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_DECREF(r) __Pyx_Refnanny->DECREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GOTREF(r) __Pyx_Refnanny->GOTREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GIVEREF(r) __Pyx_Refnanny->GIVEREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_XDECREF(r) if((r) == NULL) ; else __Pyx_DECREF(r)
#define __Pyx_SetupRefcountContext(name)   void* __pyx_refchk = __Pyx_Refnanny->NewContext((name), __LINE__, __FILE__)
#define __Pyx_FinishRefcountContext()   __Pyx_Refnanny->FinishContext(&__pyx_refchk)
#else
#define __Pyx_INCREF(r) Py_INCREF(r)
#define __Pyx_DECREF(r) Py_DECREF(r)
#define __Pyx_GOTREF(r)
#define __Pyx_GIVEREF(r)
#define __Pyx_XDECREF(r) Py_XDECREF(r)
#define __Pyx_SetupRefcountContext(name)
#define __Pyx_FinishRefcountContext()
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) if((r) == NULL) ; else __Pyx_GIVEREF(r)
#define __Pyx_XGOTREF(r) if((r) == NULL) ; else __Pyx_GOTREF(r)

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/


static INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
    }
    return r;
}

static int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#ifndef __Pyx_CppExn2PyErr
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::out_of_range& exn) {
    // catch out_of_range explicitly so the proper Python exn may be raised
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static INLINE void __Pyx_RaiseTooManyValuesError(void);

static PyObject *__Pyx_UnpackItem(PyObject *, Py_ssize_t index); /*proto*/
static int __Pyx_EndUnpack(PyObject *); /*proto*/

static INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static INLINE char __Pyx_PyInt_AsChar(PyObject *);

static INLINE short __Pyx_PyInt_AsShort(PyObject *);

static INLINE int __Pyx_PyInt_AsInt(PyObject *);

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static INLINE long __Pyx_PyInt_AsLong(PyObject *);

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Type declarations */

/* "/auto/nlg-01/chiangd/svector/svector.pyx":1
 * cdef class Vector             # <<<<<<<<<<<<<<
 * 
 * cimport numberizer
 */

struct __pyx_obj_7svector_Vector {
  PyObject_HEAD
  svector<int,double> *thisptr;
};

/* "/auto/nlg-01/chiangd/svector/svector.pyx":54
 *     return feature_numberizer.word_to_index(cs)
 * 
 * cdef class KeyIterator:             # <<<<<<<<<<<<<<
 *     cdef c_svector_iterator *thisptr
 *     cdef Vector v
 */

struct __pyx_obj_7svector_KeyIterator {
  PyObject_HEAD
  svector_iterator<int,double> *thisptr;
  struct __pyx_obj_7svector_Vector *v;
};

/* "/auto/nlg-01/chiangd/svector/svector.pyx":94
 *             raise StopIteration()
 * 
 * cdef class KeyValueIterator:             # <<<<<<<<<<<<<<
 *     cdef c_svector_iterator *thisptr
 *     cdef Vector v
 */

struct __pyx_obj_7svector_KeyValueIterator {
  PyObject_HEAD
  svector_iterator<int,double> *thisptr;
  struct __pyx_obj_7svector_Vector *v;
};

/* "/auto/nlg-01/chiangd/svector/svector.pyx":74
 *             raise StopIteration()
 * 
 * cdef class ValueIterator:             # <<<<<<<<<<<<<<
 *     cdef c_svector_iterator *thisptr
 *     cdef Vector v
 */

struct __pyx_obj_7svector_ValueIterator {
  PyObject_HEAD
  svector_iterator<int,double> *thisptr;
  struct __pyx_obj_7svector_Vector *v;
};
/* Module declarations from numberizer */

/* Module declarations from svector */

static PyTypeObject *__pyx_ptype_7svector_Vector = 0;
static PyTypeObject *__pyx_ptype_7svector_KeyIterator = 0;
static PyTypeObject *__pyx_ptype_7svector_ValueIterator = 0;
static PyTypeObject *__pyx_ptype_7svector_KeyValueIterator = 0;
static int __pyx_f_7svector_word_to_index(char *); /*proto*/
#define __Pyx_MODULE_NAME "svector"
int __pyx_module_is_main_svector = 0;

/* Implementation of svector */
static char __pyx_k___main__[] = "__main__";
static PyObject *__pyx_kp___main__;
static char __pyx_k___cinit__[] = "__cinit__";
static PyObject *__pyx_kp___cinit__;
static char __pyx_k___dealloc__[] = "__dealloc__";
static PyObject *__pyx_kp___dealloc__;
static char __pyx_k___iter__[] = "__iter__";
static PyObject *__pyx_kp___iter__;
static char __pyx_k___next__[] = "__next__";
static PyObject *__pyx_kp___next__;
static char __pyx_k___init__[] = "__init__";
static PyObject *__pyx_kp___init__;
static char __pyx_k___copy__[] = "__copy__";
static PyObject *__pyx_kp___copy__;
static char __pyx_k___str__[] = "__str__";
static PyObject *__pyx_kp___str__;
static char __pyx_k___reduce__[] = "__reduce__";
static PyObject *__pyx_kp___reduce__;
static char __pyx_k___len__[] = "__len__";
static PyObject *__pyx_kp___len__;
static char __pyx_k___setitem__[] = "__setitem__";
static PyObject *__pyx_kp___setitem__;
static char __pyx_k___getitem__[] = "__getitem__";
static PyObject *__pyx_kp___getitem__;
static char __pyx_k___delitem__[] = "__delitem__";
static PyObject *__pyx_kp___delitem__;
static char __pyx_k_iterkeys[] = "iterkeys";
static PyObject *__pyx_kp_iterkeys;
static char __pyx_k_itervalues[] = "itervalues";
static PyObject *__pyx_kp_itervalues;
static char __pyx_k_iteritems[] = "iteritems";
static PyObject *__pyx_kp_iteritems;
static char __pyx_k___contains__[] = "__contains__";
static PyObject *__pyx_kp___contains__;
static char __pyx_k___iadd__[] = "__iadd__";
static PyObject *__pyx_kp___iadd__;
static char __pyx_k___isub__[] = "__isub__";
static PyObject *__pyx_kp___isub__;
static char __pyx_k___imul__[] = "__imul__";
static PyObject *__pyx_kp___imul__;
static char __pyx_k___idiv__[] = "__idiv__";
static PyObject *__pyx_kp___idiv__;
static char __pyx_k___add__[] = "__add__";
static PyObject *__pyx_kp___add__;
static char __pyx_k___sub__[] = "__sub__";
static PyObject *__pyx_kp___sub__;
static char __pyx_k___mul__[] = "__mul__";
static PyObject *__pyx_kp___mul__;
static char __pyx_k___div__[] = "__div__";
static PyObject *__pyx_kp___div__;
static char __pyx_k___neg__[] = "__neg__";
static PyObject *__pyx_kp___neg__;
static char __pyx_k___pos__[] = "__pos__";
static PyObject *__pyx_kp___pos__;
static char __pyx_k_dot[] = "dot";
static PyObject *__pyx_kp_dot;
static char __pyx_k_norm[] = "norm";
static PyObject *__pyx_kp_norm;
static char __pyx_k_v[] = "v";
static PyObject *__pyx_kp_v;
static char __pyx_k_f[] = "f";
static PyObject *__pyx_kp_f;
static char __pyx_k_x[] = "x";
static PyObject *__pyx_kp_x;
static char __pyx_k_other[] = "other";
static PyObject *__pyx_kp_other;
static char __pyx_k_self[] = "self";
static PyObject *__pyx_kp_self;
static char __pyx_k_StopIteration[] = "StopIteration";
static PyObject *__pyx_kp_StopIteration;
static char __pyx_k_TypeError[] = "TypeError";
static PyObject *__pyx_kp_TypeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_TypeError;

/* "/auto/nlg-01/chiangd/svector/svector.pyx":49
 *     void del_svector_iterator "delete" (c_svector_iterator *)
 * 
 * cdef int word_to_index(char *s):             # <<<<<<<<<<<<<<
 *     cdef c_string cs
 *     cs.assign(s)
 */

static  int __pyx_f_7svector_word_to_index(char *__pyx_v_s) {
  std::string __pyx_v_cs;
  int __pyx_r;
  __Pyx_SetupRefcountContext("word_to_index");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":51
 * cdef int word_to_index(char *s):
 *     cdef c_string cs
 *     cs.assign(s)             # <<<<<<<<<<<<<<
 *     return feature_numberizer.word_to_index(cs)
 * 
 */
  __pyx_v_cs.assign(__pyx_v_s);

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":52
 *     cdef c_string cs
 *     cs.assign(s)
 *     return feature_numberizer.word_to_index(cs)             # <<<<<<<<<<<<<<
 * 
 * cdef class KeyIterator:
 */
  __pyx_r = feature_numberizer.word_to_index(__pyx_v_cs);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":58
 *     cdef Vector v
 * 
 *     def __cinit__(self, Vector v):             # <<<<<<<<<<<<<<
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference
 */

static int __pyx_pf_7svector_11KeyIterator___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_7svector_11KeyIterator___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7svector_Vector *__pyx_v_v = 0;
  int __pyx_r;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_v,0};
  __Pyx_SetupRefcountContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_v);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_v = ((struct __pyx_obj_7svector_Vector *)values[0]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_v = ((struct __pyx_obj_7svector_Vector *)PyTuple_GET_ITEM(__pyx_args, 0));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("svector.KeyIterator.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_7svector_Vector, 1, "v", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":59
 * 
 *     def __cinit__(self, Vector v):
 *         self.thisptr = new_svector_iterator(v.thisptr[0])             # <<<<<<<<<<<<<<
 *         self.v = v # keep reference
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->thisptr = new svector_iterator<int,double>((__pyx_v_v->thisptr[0]));

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":60
 *     def __cinit__(self, Vector v):
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_v));
  __Pyx_GOTREF(((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->v);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->v));
  ((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->v = __pyx_v_v;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("svector.KeyIterator.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":61
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):
 */

static void __pyx_pf_7svector_11KeyIterator___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_7svector_11KeyIterator___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_SetupRefcountContext("__dealloc__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":62
 *         self.v = v # keep reference
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         return self
 */
  delete(((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->thisptr);

  __Pyx_FinishRefcountContext();
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":63
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */

static PyObject *__pyx_pf_7svector_11KeyIterator___iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_11KeyIterator___iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__iter__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":64
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         cdef c_string key
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":65
 *     def __iter__(self):
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef c_string key
 *         if self.thisptr.has_next():
 */

static PyObject *__pyx_pf_7svector_11KeyIterator___next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_11KeyIterator___next__(PyObject *__pyx_v_self) {
  std::string __pyx_v_key;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("__next__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":67
 *     def __next__(self):
 *         cdef c_string key
 *         if self.thisptr.has_next():             # <<<<<<<<<<<<<<
 *             key = self.thisptr.key()
 *             self.thisptr.next()
 */
  __pyx_t_1 = ((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->thisptr->has_next();
  if (__pyx_t_1) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":68
 *         cdef c_string key
 *         if self.thisptr.has_next():
 *             key = self.thisptr.key()             # <<<<<<<<<<<<<<
 *             self.thisptr.next()
 *             return key.c_str()
 */
    try {__pyx_t_2 = ((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->thisptr->key();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_key = __pyx_t_2;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":69
 *         if self.thisptr.has_next():
 *             key = self.thisptr.key()
 *             self.thisptr.next()             # <<<<<<<<<<<<<<
 *             return key.c_str()
 *         else:
 */
    ((struct __pyx_obj_7svector_KeyIterator *)__pyx_v_self)->thisptr->next();

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":70
 *             key = self.thisptr.key()
 *             self.thisptr.next()
 *             return key.c_str()             # <<<<<<<<<<<<<<
 *         else:
 *             raise StopIteration()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_key.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":72
 *             return key.c_str()
 *         else:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 * cdef class ValueIterator:
 */
    __pyx_t_3 = PyObject_Call(__pyx_builtin_StopIteration, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("svector.KeyIterator.__next__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":78
 *     cdef Vector v
 * 
 *     def __cinit__(self, Vector v):             # <<<<<<<<<<<<<<
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference
 */

static int __pyx_pf_7svector_13ValueIterator___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_7svector_13ValueIterator___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7svector_Vector *__pyx_v_v = 0;
  int __pyx_r;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_v,0};
  __Pyx_SetupRefcountContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_v);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_v = ((struct __pyx_obj_7svector_Vector *)values[0]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_v = ((struct __pyx_obj_7svector_Vector *)PyTuple_GET_ITEM(__pyx_args, 0));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("svector.ValueIterator.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_7svector_Vector, 1, "v", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":79
 * 
 *     def __cinit__(self, Vector v):
 *         self.thisptr = new_svector_iterator(v.thisptr[0])             # <<<<<<<<<<<<<<
 *         self.v = v # keep reference
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->thisptr = new svector_iterator<int,double>((__pyx_v_v->thisptr[0]));

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":80
 *     def __cinit__(self, Vector v):
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_v));
  __Pyx_GOTREF(((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->v);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->v));
  ((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->v = __pyx_v_v;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("svector.ValueIterator.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":81
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):
 */

static void __pyx_pf_7svector_13ValueIterator___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_7svector_13ValueIterator___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_SetupRefcountContext("__dealloc__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":82
 *         self.v = v # keep reference
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         return self
 */
  delete(((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->thisptr);

  __Pyx_FinishRefcountContext();
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":83
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */

static PyObject *__pyx_pf_7svector_13ValueIterator___iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_13ValueIterator___iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__iter__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":84
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         cdef double value
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":85
 *     def __iter__(self):
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef double value
 *         if self.thisptr.has_next():
 */

static PyObject *__pyx_pf_7svector_13ValueIterator___next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_13ValueIterator___next__(PyObject *__pyx_v_self) {
  double __pyx_v_value;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__next__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":87
 *     def __next__(self):
 *         cdef double value
 *         if self.thisptr.has_next():             # <<<<<<<<<<<<<<
 *             value = self.thisptr.value()
 *             self.thisptr.next()
 */
  __pyx_t_1 = ((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->thisptr->has_next();
  if (__pyx_t_1) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":88
 *         cdef double value
 *         if self.thisptr.has_next():
 *             value = self.thisptr.value()             # <<<<<<<<<<<<<<
 *             self.thisptr.next()
 *             return value
 */
    __pyx_v_value = ((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->thisptr->value();

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":89
 *         if self.thisptr.has_next():
 *             value = self.thisptr.value()
 *             self.thisptr.next()             # <<<<<<<<<<<<<<
 *             return value
 *         else:
 */
    ((struct __pyx_obj_7svector_ValueIterator *)__pyx_v_self)->thisptr->next();

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":90
 *             value = self.thisptr.value()
 *             self.thisptr.next()
 *             return value             # <<<<<<<<<<<<<<
 *         else:
 *             raise StopIteration()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":92
 *             return value
 *         else:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 * cdef class KeyValueIterator:
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_StopIteration, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.ValueIterator.__next__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":98
 *     cdef Vector v
 * 
 *     def __cinit__(self, Vector v):             # <<<<<<<<<<<<<<
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference
 */

static int __pyx_pf_7svector_16KeyValueIterator___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_7svector_16KeyValueIterator___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7svector_Vector *__pyx_v_v = 0;
  int __pyx_r;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_v,0};
  __Pyx_SetupRefcountContext("__cinit__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_v);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_v = ((struct __pyx_obj_7svector_Vector *)values[0]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_v = ((struct __pyx_obj_7svector_Vector *)PyTuple_GET_ITEM(__pyx_args, 0));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("svector.KeyValueIterator.__cinit__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_v), __pyx_ptype_7svector_Vector, 1, "v", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":99
 * 
 *     def __cinit__(self, Vector v):
 *         self.thisptr = new_svector_iterator(v.thisptr[0])             # <<<<<<<<<<<<<<
 *         self.v = v # keep reference
 *     def __dealloc__(self):
 */
  ((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->thisptr = new svector_iterator<int,double>((__pyx_v_v->thisptr[0]));

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":100
 *     def __cinit__(self, Vector v):
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_v));
  __Pyx_GOTREF(((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->v);
  __Pyx_DECREF(((PyObject *)((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->v));
  ((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->v = __pyx_v_v;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("svector.KeyValueIterator.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":101
 *         self.thisptr = new_svector_iterator(v.thisptr[0])
 *         self.v = v # keep reference
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):
 */

static void __pyx_pf_7svector_16KeyValueIterator___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_7svector_16KeyValueIterator___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_SetupRefcountContext("__dealloc__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":102
 *         self.v = v # keep reference
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)             # <<<<<<<<<<<<<<
 *     def __iter__(self):
 *         return self
 */
  delete(((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->thisptr);

  __Pyx_FinishRefcountContext();
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":103
 *     def __dealloc__(self):
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */

static PyObject *__pyx_pf_7svector_16KeyValueIterator___iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_16KeyValueIterator___iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__iter__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":104
 *         del_svector_iterator(self.thisptr)
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         cdef c_string key
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":105
 *     def __iter__(self):
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         cdef c_string key
 *         cdef double value
 */

static PyObject *__pyx_pf_7svector_16KeyValueIterator___next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_16KeyValueIterator___next__(PyObject *__pyx_v_self) {
  std::string __pyx_v_key;
  double __pyx_v_value;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_SetupRefcountContext("__next__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":108
 *         cdef c_string key
 *         cdef double value
 *         if self.thisptr.has_next():             # <<<<<<<<<<<<<<
 *             key = self.thisptr.key()
 *             value = self.thisptr.value()
 */
  __pyx_t_1 = ((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->thisptr->has_next();
  if (__pyx_t_1) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":109
 *         cdef double value
 *         if self.thisptr.has_next():
 *             key = self.thisptr.key()             # <<<<<<<<<<<<<<
 *             value = self.thisptr.value()
 *             self.thisptr.next()
 */
    try {__pyx_t_2 = ((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->thisptr->key();} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
    __pyx_v_key = __pyx_t_2;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":110
 *         if self.thisptr.has_next():
 *             key = self.thisptr.key()
 *             value = self.thisptr.value()             # <<<<<<<<<<<<<<
 *             self.thisptr.next()
 *             return (key.c_str(), value)
 */
    __pyx_v_value = ((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->thisptr->value();

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":111
 *             key = self.thisptr.key()
 *             value = self.thisptr.value()
 *             self.thisptr.next()             # <<<<<<<<<<<<<<
 *             return (key.c_str(), value)
 *         else:
 */
    ((struct __pyx_obj_7svector_KeyValueIterator *)__pyx_v_self)->thisptr->next();

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":112
 *             value = self.thisptr.value()
 *             self.thisptr.next()
 *             return (key.c_str(), value)             # <<<<<<<<<<<<<<
 *         else:
 *             raise StopIteration()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_key.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = ((PyObject *)__pyx_t_5);
    __pyx_t_5 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":114
 *             return (key.c_str(), value)
 *         else:
 *             raise StopIteration()             # <<<<<<<<<<<<<<
 * 
 * cdef class Vector:
 */
    __pyx_t_5 = PyObject_Call(__pyx_builtin_StopIteration, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("svector.KeyValueIterator.__next__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":119
 *     cdef c_svector *thisptr
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef Vector vx
 *         cdef c_string s
 */

static int __pyx_pf_7svector_6Vector___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_7svector_6Vector___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  struct __pyx_obj_7svector_Vector *__pyx_v_vx;
  std::string __pyx_v_s;
  PyObject *__pyx_v_x;
  PyObject *__pyx_v_f;
  PyObject *__pyx_v_v;
  int __pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  char *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_v_vx = ((struct __pyx_obj_7svector_Vector *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_x = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_f = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_v = Py_None; __Pyx_INCREF(Py_None);

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":123
 *         cdef c_string s
 * 
 *         del_svector(self.thisptr) # in case __init__ is called twice             # <<<<<<<<<<<<<<
 * 
 *         if len(args) == 0:
 */
  delete(((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr);

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":125
 *         del_svector(self.thisptr) # in case __init__ is called twice
 * 
 *         if len(args) == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new_svector()
 *         elif len(args) == 1:
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (__pyx_t_2) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":126
 * 
 *         if len(args) == 0:
 *             self.thisptr = new_svector()             # <<<<<<<<<<<<<<
 *         elif len(args) == 1:
 *             x = args[0]
 */
    ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr = new svector<int,double>();
    goto __pyx_L5;
  }

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":127
 *         if len(args) == 0:
 *             self.thisptr = new_svector()
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             x = args[0]
 *             if isinstance(x, str):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":128
 *             self.thisptr = new_svector()
 *         elif len(args) == 1:
 *             x = args[0]             # <<<<<<<<<<<<<<
 *             if isinstance(x, str):
 *                 s.assign(x)
 */
    __pyx_1 = __Pyx_GetItemInt(__pyx_v_args, 0, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_1);
    __Pyx_DECREF(__pyx_v_x);
    __pyx_v_x = __pyx_1;
    __pyx_1 = 0;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":129
 *         elif len(args) == 1:
 *             x = args[0]
 *             if isinstance(x, str):             # <<<<<<<<<<<<<<
 *                 s.assign(x)
 *                 self.thisptr = svector_from_str(s)
 */
    __pyx_t_2 = PyObject_TypeCheck(__pyx_v_x, ((PyTypeObject *)((PyObject*)&PyString_Type))); 
    if (__pyx_t_2) {

      /* "/auto/nlg-01/chiangd/svector/svector.pyx":130
 *             x = args[0]
 *             if isinstance(x, str):
 *                 s.assign(x)             # <<<<<<<<<<<<<<
 *                 self.thisptr = svector_from_str(s)
 *             elif isinstance(x, Vector):
 */
      __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_x); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_s.assign(__pyx_t_3);

      /* "/auto/nlg-01/chiangd/svector/svector.pyx":131
 *             if isinstance(x, str):
 *                 s.assign(x)
 *                 self.thisptr = svector_from_str(s)             # <<<<<<<<<<<<<<
 *             elif isinstance(x, Vector):
 *                 vx = x
 */
      ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr = svector_from_str<int,double>(__pyx_v_s);
      goto __pyx_L6;
    }

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":132
 *                 s.assign(x)
 *                 self.thisptr = svector_from_str(s)
 *             elif isinstance(x, Vector):             # <<<<<<<<<<<<<<
 *                 vx = x
 *                 self.thisptr = copy_svector(vx.thisptr[0])
 */
    __pyx_t_2 = PyObject_TypeCheck(__pyx_v_x, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
    if (__pyx_t_2) {

      /* "/auto/nlg-01/chiangd/svector/svector.pyx":133
 *                 self.thisptr = svector_from_str(s)
 *             elif isinstance(x, Vector):
 *                 vx = x             # <<<<<<<<<<<<<<
 *                 self.thisptr = copy_svector(vx.thisptr[0])
 *             elif isinstance(x, dict):
 */
      if (!(__Pyx_TypeTest(__pyx_v_x, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_INCREF(__pyx_v_x);
      __Pyx_DECREF(((PyObject *)__pyx_v_vx));
      __pyx_v_vx = ((struct __pyx_obj_7svector_Vector *)__pyx_v_x);

      /* "/auto/nlg-01/chiangd/svector/svector.pyx":134
 *             elif isinstance(x, Vector):
 *                 vx = x
 *                 self.thisptr = copy_svector(vx.thisptr[0])             # <<<<<<<<<<<<<<
 *             elif isinstance(x, dict):
 *                 self.thisptr = new_svector()
 */
      ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr = new svector<int,double>((__pyx_v_vx->thisptr[0]));
      goto __pyx_L6;
    }

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":135
 *                 vx = x
 *                 self.thisptr = copy_svector(vx.thisptr[0])
 *             elif isinstance(x, dict):             # <<<<<<<<<<<<<<
 *                 self.thisptr = new_svector()
 *                 for f,v in x.iteritems():
 */
    __pyx_t_2 = PyObject_TypeCheck(__pyx_v_x, ((PyTypeObject *)((PyObject*)&PyDict_Type))); 
    if (__pyx_t_2) {

      /* "/auto/nlg-01/chiangd/svector/svector.pyx":136
 *                 self.thisptr = copy_svector(vx.thisptr[0])
 *             elif isinstance(x, dict):
 *                 self.thisptr = new_svector()             # <<<<<<<<<<<<<<
 *                 for f,v in x.iteritems():
 *                     svector_setitem(self.thisptr[0], word_to_index(f), v)
 */
      ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr = new svector<int,double>();

      /* "/auto/nlg-01/chiangd/svector/svector.pyx":137
 *             elif isinstance(x, dict):
 *                 self.thisptr = new_svector()
 *                 for f,v in x.iteritems():             # <<<<<<<<<<<<<<
 *                     svector_setitem(self.thisptr[0], word_to_index(f), v)
 *             else:
 */
      __pyx_t_4 = PyObject_GetAttr(__pyx_v_x, __pyx_kp_iteritems); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_1 = 0; __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4);
      } else {
        __pyx_t_1 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++;
        } else if (likely(PyTuple_CheckExact(__pyx_t_4))) {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++;
        } else {
          __pyx_t_5 = PyIter_Next(__pyx_t_4);
          if (!__pyx_t_5) {
            if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        if (PyTuple_CheckExact(__pyx_t_5) && likely(PyTuple_GET_SIZE(__pyx_t_5) == 2)) {
          PyObject* tuple = __pyx_t_5;
          __pyx_2 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_2);
          __pyx_3 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_3);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_v_f);
          __pyx_v_f = __pyx_2;
          __pyx_2 = 0;
          __Pyx_DECREF(__pyx_v_v);
          __pyx_v_v = __pyx_3;
          __pyx_3 = 0;
        } else {
          __pyx_1 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_2 = __Pyx_UnpackItem(__pyx_1, 0); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_2);
          __pyx_3 = __Pyx_UnpackItem(__pyx_1, 1); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_3);
          if (__Pyx_EndUnpack(__pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
          __Pyx_DECREF(__pyx_v_f);
          __pyx_v_f = __pyx_2;
          __pyx_2 = 0;
          __Pyx_DECREF(__pyx_v_v);
          __pyx_v_v = __pyx_3;
          __pyx_3 = 0;
        }

        /* "/auto/nlg-01/chiangd/svector/svector.pyx":138
 *                 self.thisptr = new_svector()
 *                 for f,v in x.iteritems():
 *                     svector_setitem(self.thisptr[0], word_to_index(f), v)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError()
 */
        __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_f); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        svector_setitem((((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr[0]), __pyx_f_7svector_word_to_index(__pyx_t_3), __pyx_t_6);
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L6;
    }
    /*else*/ {

      /* "/auto/nlg-01/chiangd/svector/svector.pyx":140
 *                     svector_setitem(self.thisptr[0], word_to_index(f), v)
 *             else:
 *                 raise TypeError()             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             f, x = args
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L6:;
    goto __pyx_L5;
  }

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":141
 *             else:
 *                 raise TypeError()
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             f, x = args
 *             self.thisptr = new_svector2(word_to_index(f), x)
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (__pyx_t_2) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":142
 *                 raise TypeError()
 *         elif len(args) == 2:
 *             f, x = args             # <<<<<<<<<<<<<<
 *             self.thisptr = new_svector2(word_to_index(f), x)
 *         else:
 */
    if (PyTuple_CheckExact(__pyx_v_args) && likely(PyTuple_GET_SIZE(__pyx_v_args) == 2)) {
      PyObject* tuple = __pyx_v_args;
      __pyx_2 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_2);
      __pyx_3 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_3);
      __Pyx_DECREF(__pyx_v_f);
      __pyx_v_f = __pyx_2;
      __pyx_2 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_3;
      __pyx_3 = 0;
    } else {
      __pyx_1 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_1);
      __pyx_2 = __Pyx_UnpackItem(__pyx_1, 0); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_2);
      __pyx_3 = __Pyx_UnpackItem(__pyx_1, 1); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_3);
      if (__Pyx_EndUnpack(__pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
      __Pyx_DECREF(__pyx_v_f);
      __pyx_v_f = __pyx_2;
      __pyx_2 = 0;
      __Pyx_DECREF(__pyx_v_x);
      __pyx_v_x = __pyx_3;
      __pyx_3 = 0;
    }

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":143
 *         elif len(args) == 2:
 *             f, x = args
 *             self.thisptr = new_svector2(word_to_index(f), x)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError()
 */
    __pyx_t_3 = __Pyx_PyBytes_AsString(__pyx_v_f); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_x); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr = new svector<int,double>(__pyx_f_7svector_word_to_index(__pyx_t_3), __pyx_t_6);
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":145
 *             self.thisptr = new_svector2(word_to_index(f), x)
 *         else:
 *             raise TypeError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_TypeError, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L5:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_2);
  __Pyx_XDECREF(__pyx_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("svector.Vector.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF((PyObject *)__pyx_v_vx);
  __Pyx_DECREF(__pyx_v_x);
  __Pyx_DECREF(__pyx_v_f);
  __Pyx_DECREF(__pyx_v_v);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":147
 *             raise TypeError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del_svector(self.thisptr)
 * 
 */

static void __pyx_pf_7svector_6Vector___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_7svector_6Vector___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_SetupRefcountContext("__dealloc__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":148
 * 
 *     def __dealloc__(self):
 *         del_svector(self.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  delete(((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr);

  __Pyx_FinishRefcountContext();
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":150
 *         del_svector(self.thisptr)
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         return Vector(self)
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector___copy__(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___copy__(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__copy__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":151
 * 
 *     def __copy__(self):
 *         return Vector(self)             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.__copy__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":153
 *         return Vector(self)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         cdef c_string cs = svector_str(self.thisptr[0])
 *         return cs.c_str()
 */

static PyObject *__pyx_pf_7svector_6Vector___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___str__(PyObject *__pyx_v_self) {
  std::string __pyx_v_cs;
  PyObject *__pyx_r = NULL;
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__str__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":154
 * 
 *     def __str__(self):
 *         cdef c_string cs = svector_str(self.thisptr[0])             # <<<<<<<<<<<<<<
 *         return cs.c_str()
 * 
 */
  try {__pyx_t_1 = svector_str((((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_cs = __pyx_t_1;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":155
 *     def __str__(self):
 *         cdef c_string cs = svector_str(self.thisptr[0])
 *         return cs.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def __reduce__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_cs.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":157
 *         return cs.c_str()
 * 
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         cdef c_string cs = svector_str(self.thisptr[0])
 *         return (Vector, (cs.c_str(),))
 */

static PyObject *__pyx_pf_7svector_6Vector___reduce__(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___reduce__(PyObject *__pyx_v_self, PyObject *unused) {
  std::string __pyx_v_cs;
  PyObject *__pyx_r = NULL;
  std::string __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_SetupRefcountContext("__reduce__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":158
 * 
 *     def __reduce__(self):
 *         cdef c_string cs = svector_str(self.thisptr[0])             # <<<<<<<<<<<<<<
 *         return (Vector, (cs.c_str(),))
 * 
 */
  try {__pyx_t_1 = svector_str((((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr[0]));} catch(...) {__Pyx_CppExn2PyErr(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}}
  __pyx_v_cs = __pyx_t_1;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":159
 *     def __reduce__(self):
 *         cdef c_string cs = svector_str(self.thisptr[0])
 *         return (Vector, (cs.c_str(),))             # <<<<<<<<<<<<<<
 * 
 *     # container interface
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_cs.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_3));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("svector.Vector.__reduce__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":163
 *     # container interface
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * 
 */

static Py_ssize_t __pyx_pf_7svector_6Vector___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pf_7svector_6Vector___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_SetupRefcountContext("__len__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":164
 * 
 *     def __len__(self):
 *         return self.thisptr.size()             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, char *f, double x):
 */
  __pyx_r = ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->size();
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":166
 *         return self.thisptr.size()
 * 
 *     def __setitem__(self, char *f, double x):             # <<<<<<<<<<<<<<
 *         svector_setitem(self.thisptr[0], word_to_index(f), x)
 * 
 */

static int __pyx_pf_7svector_6Vector___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f, PyObject *__pyx_arg_x); /*proto*/
static int __pyx_pf_7svector_6Vector___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f, PyObject *__pyx_arg_x) {
  char *__pyx_v_f;
  double __pyx_v_x;
  int __pyx_r;
  __Pyx_SetupRefcountContext("__setitem__");
  assert(__pyx_arg_f); {
    __pyx_v_f = __Pyx_PyBytes_AsString(__pyx_arg_f); if (unlikely((!__pyx_v_f) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  assert(__pyx_arg_x); {
    __pyx_v_x = __pyx_PyFloat_AsDouble(__pyx_arg_x); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("svector.Vector.__setitem__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":167
 * 
 *     def __setitem__(self, char *f, double x):
 *         svector_setitem(self.thisptr[0], word_to_index(f), x)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, char *f):
 */
  svector_setitem((((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr[0]), __pyx_f_7svector_word_to_index(__pyx_v_f), __pyx_v_x);

  __pyx_r = 0;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":169
 *         svector_setitem(self.thisptr[0], word_to_index(f), x)
 * 
 *     def __getitem__(self, char *f):             # <<<<<<<<<<<<<<
 *         return svector_getitem(self.thisptr[0], word_to_index(f))
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f) {
  char *__pyx_v_f;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("__getitem__");
  assert(__pyx_arg_f); {
    __pyx_v_f = __Pyx_PyBytes_AsString(__pyx_arg_f); if (unlikely((!__pyx_v_f) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("svector.Vector.__getitem__");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":170
 * 
 *     def __getitem__(self, char *f):
 *         return svector_getitem(self.thisptr[0], word_to_index(f))             # <<<<<<<<<<<<<<
 * 
 *     def __delitem__(self, char *f):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(svector_getitem((((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr[0]), __pyx_f_7svector_word_to_index(__pyx_v_f))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("svector.Vector.__getitem__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":172
 *         return svector_getitem(self.thisptr[0], word_to_index(f))
 * 
 *     def __delitem__(self, char *f):             # <<<<<<<<<<<<<<
 *         self.thisptr.erase(word_to_index(f))
 * 
 */

static int __pyx_pf_7svector_6Vector___delitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f); /*proto*/
static int __pyx_pf_7svector_6Vector___delitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f) {
  char *__pyx_v_f;
  int __pyx_r;
  __Pyx_SetupRefcountContext("__delitem__");
  assert(__pyx_arg_f); {
    __pyx_v_f = __Pyx_PyBytes_AsString(__pyx_arg_f); if (unlikely((!__pyx_v_f) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("svector.Vector.__delitem__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":173
 * 
 *     def __delitem__(self, char *f):
 *         self.thisptr.erase(word_to_index(f))             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->erase(__pyx_f_7svector_word_to_index(__pyx_v_f));

  __pyx_r = 0;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":175
 *         self.thisptr.erase(word_to_index(f))
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return KeyIterator(self)
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector___iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__iter__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":176
 * 
 *     def __iter__(self):
 *         return KeyIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     def iterkeys(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_KeyIterator)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.__iter__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":178
 *         return KeyIterator(self)
 * 
 *     def iterkeys(self):             # <<<<<<<<<<<<<<
 *         return KeyIterator(self)
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector_iterkeys(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector_iterkeys(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("iterkeys");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":179
 * 
 *     def iterkeys(self):
 *         return KeyIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     def itervalues(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_KeyIterator)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.iterkeys");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":181
 *         return KeyIterator(self)
 * 
 *     def itervalues(self):             # <<<<<<<<<<<<<<
 *         return ValueIterator(self)
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector_itervalues(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector_itervalues(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("itervalues");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":182
 * 
 *     def itervalues(self):
 *         return ValueIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     def iteritems(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_ValueIterator)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.itervalues");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":184
 *         return ValueIterator(self)
 * 
 *     def iteritems(self):             # <<<<<<<<<<<<<<
 *         return KeyValueIterator(self)
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector_iteritems(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector_iteritems(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("iteritems");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":185
 * 
 *     def iteritems(self):
 *         return KeyValueIterator(self)             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, char *f):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_KeyValueIterator)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.iteritems");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":187
 *         return KeyValueIterator(self)
 * 
 *     def __contains__(self, char *f):             # <<<<<<<<<<<<<<
 *         return svector_contains(self.thisptr[0], word_to_index(f))
 * 
 */

static int __pyx_pf_7svector_6Vector___contains__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f); /*proto*/
static int __pyx_pf_7svector_6Vector___contains__(PyObject *__pyx_v_self, PyObject *__pyx_arg_f) {
  char *__pyx_v_f;
  int __pyx_r;
  __Pyx_SetupRefcountContext("__contains__");
  assert(__pyx_arg_f); {
    __pyx_v_f = __Pyx_PyBytes_AsString(__pyx_arg_f); if (unlikely((!__pyx_v_f) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("svector.Vector.__contains__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":188
 * 
 *     def __contains__(self, char *f):
 *         return svector_contains(self.thisptr[0], word_to_index(f))             # <<<<<<<<<<<<<<
 * 
 *     # algebraic operations
 */
  __pyx_r = svector_contains((((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr[0]), __pyx_f_7svector_word_to_index(__pyx_v_f));
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":192
 *     # algebraic operations
 * 
 *     def __iadd__(self, Vector other):             # <<<<<<<<<<<<<<
 *         self.thisptr.iadd(other.thisptr[0])
 *         return self
 */

static PyObject *__pyx_pf_7svector_6Vector___iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___iadd__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__iadd__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7svector_Vector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":193
 * 
 *     def __iadd__(self, Vector other):
 *         self.thisptr.iadd(other.thisptr[0])             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->operator+=((((struct __pyx_obj_7svector_Vector *)__pyx_v_other)->thisptr[0]));

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":194
 *     def __iadd__(self, Vector other):
 *         self.thisptr.iadd(other.thisptr[0])
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __isub__(self, Vector other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("svector.Vector.__iadd__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":196
 *         return self
 * 
 *     def __isub__(self, Vector other):             # <<<<<<<<<<<<<<
 *         self.thisptr.isub(other.thisptr[0])
 *         return self
 */

static PyObject *__pyx_pf_7svector_6Vector___isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___isub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__isub__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7svector_Vector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":197
 * 
 *     def __isub__(self, Vector other):
 *         self.thisptr.isub(other.thisptr[0])             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->operator-=((((struct __pyx_obj_7svector_Vector *)__pyx_v_other)->thisptr[0]));

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":198
 *     def __isub__(self, Vector other):
 *         self.thisptr.isub(other.thisptr[0])
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __imul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("svector.Vector.__isub__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":200
 *         return self
 * 
 *     def __imul__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Vector):
 *             return self.__mul__(other)
 */

static PyObject *__pyx_pf_7svector_6Vector___imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___imul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_SetupRefcountContext("__imul__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":201
 * 
 *     def __imul__(self, other):
 *         if isinstance(other, Vector):             # <<<<<<<<<<<<<<
 *             return self.__mul__(other)
 *         else:
 */
  __pyx_t_1 = PyObject_TypeCheck(__pyx_v_other, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
  if (__pyx_t_1) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":202
 *     def __imul__(self, other):
 *         if isinstance(other, Vector):
 *             return self.__mul__(other)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr.imul(float(other))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp___mul__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":204
 *             return self.__mul__(other)
 *         else:
 *             self.thisptr.imul(float(other))             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)&PyFloat_Type)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->operator*=(__pyx_t_5);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":205
 *         else:
 *             self.thisptr.imul(float(other))
 *             return self             # <<<<<<<<<<<<<<
 * 
 *     def __idiv__(self, other):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self);
    __pyx_r = __pyx_v_self;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("svector.Vector.__imul__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":207
 *             return self
 * 
 *     def __idiv__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Vector):
 *             return self.__div__(other)
 */

static PyObject *__pyx_pf_7svector_6Vector___idiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___idiv__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_SetupRefcountContext("__idiv__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":208
 * 
 *     def __idiv__(self, other):
 *         if isinstance(other, Vector):             # <<<<<<<<<<<<<<
 *             return self.__div__(other)
 *         else:
 */
  __pyx_t_1 = PyObject_TypeCheck(__pyx_v_other, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
  if (__pyx_t_1) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":209
 *     def __idiv__(self, other):
 *         if isinstance(other, Vector):
 *             return self.__div__(other)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr.idiv(float(other))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp___div__); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":211
 *             return self.__div__(other)
 *         else:
 *             self.thisptr.idiv(float(other))             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)&PyFloat_Type)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    ((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->operator/=(__pyx_t_5);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":212
 *         else:
 *             self.thisptr.idiv(float(other))
 *             return self             # <<<<<<<<<<<<<<
 * 
 *     def __add__(Vector self, Vector other):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self);
    __pyx_r = __pyx_v_self;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("svector.Vector.__idiv__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":214
 *             return self
 * 
 *     def __add__(Vector self, Vector other):             # <<<<<<<<<<<<<<
 *         cdef Vector z = Vector(self)
 *         z.thisptr.iadd(other.thisptr[0])
 */

static PyObject *__pyx_pf_7svector_6Vector___add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_7svector_Vector *__pyx_v_z = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__add__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_7svector_Vector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7svector_Vector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":215
 * 
 *     def __add__(Vector self, Vector other):
 *         cdef Vector z = Vector(self)             # <<<<<<<<<<<<<<
 *         z.thisptr.iadd(other.thisptr[0])
 *         return z
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":216
 *     def __add__(Vector self, Vector other):
 *         cdef Vector z = Vector(self)
 *         z.thisptr.iadd(other.thisptr[0])             # <<<<<<<<<<<<<<
 *         return z
 * 
 */
  __pyx_v_z->thisptr->operator+=((((struct __pyx_obj_7svector_Vector *)__pyx_v_other)->thisptr[0]));

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":217
 *         cdef Vector z = Vector(self)
 *         z.thisptr.iadd(other.thisptr[0])
 *         return z             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(Vector self, Vector other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_z));
  __pyx_r = ((PyObject *)__pyx_v_z);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.__add__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":219
 *         return z
 * 
 *     def __sub__(Vector self, Vector other):             # <<<<<<<<<<<<<<
 *         cdef Vector z = Vector(self)
 *         z.thisptr.isub(other.thisptr[0])
 */

static PyObject *__pyx_pf_7svector_6Vector___sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_7svector_Vector *__pyx_v_z = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__sub__");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_7svector_Vector, 1, "self", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7svector_Vector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":220
 * 
 *     def __sub__(Vector self, Vector other):
 *         cdef Vector z = Vector(self)             # <<<<<<<<<<<<<<
 *         z.thisptr.isub(other.thisptr[0])
 *         return z
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":221
 *     def __sub__(Vector self, Vector other):
 *         cdef Vector z = Vector(self)
 *         z.thisptr.isub(other.thisptr[0])             # <<<<<<<<<<<<<<
 *         return z
 * 
 */
  __pyx_v_z->thisptr->operator-=((((struct __pyx_obj_7svector_Vector *)__pyx_v_other)->thisptr[0]));

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":222
 *         cdef Vector z = Vector(self)
 *         z.thisptr.isub(other.thisptr[0])
 *         return z             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_z));
  __pyx_r = ((PyObject *)__pyx_v_z);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.__sub__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":224
 *         return z
 * 
 *     def __mul__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Vector x
 *         cdef Vector y
 */

static PyObject *__pyx_pf_7svector_6Vector___mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_7svector_Vector *__pyx_v_x;
  struct __pyx_obj_7svector_Vector *__pyx_v_y;
  struct __pyx_obj_7svector_Vector *__pyx_v_z;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  __Pyx_SetupRefcountContext("__mul__");
  __pyx_v_x = ((struct __pyx_obj_7svector_Vector *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_y = ((struct __pyx_obj_7svector_Vector *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)Py_None); __Pyx_INCREF(Py_None);

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":228
 *         cdef Vector y
 *         cdef Vector z
 *         if isinstance(self, Vector) and isinstance(other, Vector): # elementwise product             # <<<<<<<<<<<<<<
 *             x = self
 *             y = other
 */
  __pyx_t_1 = PyObject_TypeCheck(__pyx_v_self, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
  if (__pyx_t_1) {
    __pyx_t_2 = PyObject_TypeCheck(__pyx_v_other, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":229
 *         cdef Vector z
 *         if isinstance(self, Vector) and isinstance(other, Vector): # elementwise product
 *             x = self             # <<<<<<<<<<<<<<
 *             y = other
 *             z = Vector()
 */
    if (!(__Pyx_TypeTest(__pyx_v_self, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_DECREF(((PyObject *)__pyx_v_x));
    __pyx_v_x = ((struct __pyx_obj_7svector_Vector *)__pyx_v_self);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":230
 *         if isinstance(self, Vector) and isinstance(other, Vector): # elementwise product
 *             x = self
 *             y = other             # <<<<<<<<<<<<<<
 *             z = Vector()
 *             del_svector(z.thisptr)
 */
    if (!(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_DECREF(((PyObject *)__pyx_v_y));
    __pyx_v_y = ((struct __pyx_obj_7svector_Vector *)__pyx_v_other);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":231
 *             x = self
 *             y = other
 *             z = Vector()             # <<<<<<<<<<<<<<
 *             del_svector(z.thisptr)
 *             z.thisptr = copy_svector(x.thisptr.mul(y.thisptr[0]))
 */
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (!(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_z));
    __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":232
 *             y = other
 *             z = Vector()
 *             del_svector(z.thisptr)             # <<<<<<<<<<<<<<
 *             z.thisptr = copy_svector(x.thisptr.mul(y.thisptr[0]))
 *             #x.thisptr.mul(y.thisptr[0]).swap(z.thisptr[0])
 */
    delete(__pyx_v_z->thisptr);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":233
 *             z = Vector()
 *             del_svector(z.thisptr)
 *             z.thisptr = copy_svector(x.thisptr.mul(y.thisptr[0]))             # <<<<<<<<<<<<<<
 *             #x.thisptr.mul(y.thisptr[0]).swap(z.thisptr[0])
 * 
 */
    __pyx_v_z->thisptr = new svector<int,double>(__pyx_v_x->thisptr->operator*((__pyx_v_y->thisptr[0])));
    goto __pyx_L5;
  }

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":236
 *             #x.thisptr.mul(y.thisptr[0]).swap(z.thisptr[0])
 * 
 *         elif isinstance(self, Vector): # scalar product             # <<<<<<<<<<<<<<
 *             z = Vector(self)
 *             z.thisptr.imul(float(other))
 */
  __pyx_t_3 = PyObject_TypeCheck(__pyx_v_self, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
  if (__pyx_t_3) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":237
 * 
 *         elif isinstance(self, Vector): # scalar product
 *             z = Vector(self)             # <<<<<<<<<<<<<<
 *             z.thisptr.imul(float(other))
 *         elif isinstance(other, Vector): # reverse scalar product
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    if (!(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_z));
    __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":238
 *         elif isinstance(self, Vector): # scalar product
 *             z = Vector(self)
 *             z.thisptr.imul(float(other))             # <<<<<<<<<<<<<<
 *         elif isinstance(other, Vector): # reverse scalar product
 *             z = Vector(other)
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)&PyFloat_Type)), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_z->thisptr->operator*=(__pyx_t_6);
    goto __pyx_L5;
  }

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":239
 *             z = Vector(self)
 *             z.thisptr.imul(float(other))
 *         elif isinstance(other, Vector): # reverse scalar product             # <<<<<<<<<<<<<<
 *             z = Vector(other)
 *             z.thisptr.imul(float(self))
 */
  __pyx_t_3 = PyObject_TypeCheck(__pyx_v_other, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
  if (__pyx_t_3) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":240
 *             z.thisptr.imul(float(other))
 *         elif isinstance(other, Vector): # reverse scalar product
 *             z = Vector(other)             # <<<<<<<<<<<<<<
 *             z.thisptr.imul(float(self))
 *         return z
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    if (!(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_z));
    __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":241
 *         elif isinstance(other, Vector): # reverse scalar product
 *             z = Vector(other)
 *             z.thisptr.imul(float(self))             # <<<<<<<<<<<<<<
 *         return z
 * 
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    __Pyx_INCREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)&PyFloat_Type)), ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_z->thisptr->operator*=(__pyx_t_6);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":242
 *             z = Vector(other)
 *             z.thisptr.imul(float(self))
 *         return z             # <<<<<<<<<<<<<<
 * 
 *     def __div__(self, other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_z));
  __pyx_r = ((PyObject *)__pyx_v_z);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("svector.Vector.__mul__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_x);
  __Pyx_DECREF((PyObject *)__pyx_v_y);
  __Pyx_DECREF((PyObject *)__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":244
 *         return z
 * 
 *     def __div__(self, other):             # <<<<<<<<<<<<<<
 *         cdef Vector x
 *         cdef Vector y
 */

static PyObject *__pyx_pf_7svector_6Vector___div__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___div__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  struct __pyx_obj_7svector_Vector *__pyx_v_x;
  struct __pyx_obj_7svector_Vector *__pyx_v_y;
  struct __pyx_obj_7svector_Vector *__pyx_v_z;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  __Pyx_SetupRefcountContext("__div__");
  __pyx_v_x = ((struct __pyx_obj_7svector_Vector *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_y = ((struct __pyx_obj_7svector_Vector *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)Py_None); __Pyx_INCREF(Py_None);

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":248
 *         cdef Vector y
 *         cdef Vector z
 *         if isinstance(other, Vector): # elementwise divide             # <<<<<<<<<<<<<<
 *             x = self
 *             y = other
 */
  __pyx_t_1 = PyObject_TypeCheck(__pyx_v_other, ((PyTypeObject *)((PyObject*)__pyx_ptype_7svector_Vector))); 
  if (__pyx_t_1) {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":249
 *         cdef Vector z
 *         if isinstance(other, Vector): # elementwise divide
 *             x = self             # <<<<<<<<<<<<<<
 *             y = other
 *             z = Vector()
 */
    if (!(__Pyx_TypeTest(__pyx_v_self, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_DECREF(((PyObject *)__pyx_v_x));
    __pyx_v_x = ((struct __pyx_obj_7svector_Vector *)__pyx_v_self);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":250
 *         if isinstance(other, Vector): # elementwise divide
 *             x = self
 *             y = other             # <<<<<<<<<<<<<<
 *             z = Vector()
 *             del_svector(z.thisptr)
 */
    if (!(__Pyx_TypeTest(__pyx_v_other, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_INCREF(__pyx_v_other);
    __Pyx_DECREF(((PyObject *)__pyx_v_y));
    __pyx_v_y = ((struct __pyx_obj_7svector_Vector *)__pyx_v_other);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":251
 *             x = self
 *             y = other
 *             z = Vector()             # <<<<<<<<<<<<<<
 *             del_svector(z.thisptr)
 *             z.thisptr = copy_svector(x.thisptr.div(y.thisptr[0]))
 */
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    if (!(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_z));
    __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":252
 *             y = other
 *             z = Vector()
 *             del_svector(z.thisptr)             # <<<<<<<<<<<<<<
 *             z.thisptr = copy_svector(x.thisptr.div(y.thisptr[0]))
 *             #x.thisptr.mul(y.thisptr[0]).swap(z.thisptr[0])
 */
    delete(__pyx_v_z->thisptr);

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":253
 *             z = Vector()
 *             del_svector(z.thisptr)
 *             z.thisptr = copy_svector(x.thisptr.div(y.thisptr[0]))             # <<<<<<<<<<<<<<
 *             #x.thisptr.mul(y.thisptr[0]).swap(z.thisptr[0])
 *         else:
 */
    __pyx_v_z->thisptr = new svector<int,double>(__pyx_v_x->thisptr->operator/((__pyx_v_y->thisptr[0])));
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":256
 *             #x.thisptr.mul(y.thisptr[0]).swap(z.thisptr[0])
 *         else:
 *             z = Vector(self)             # <<<<<<<<<<<<<<
 *             z.thisptr.idiv(float(other))
 *         return z
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    if (!(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_z));
    __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "/auto/nlg-01/chiangd/svector/svector.pyx":257
 *         else:
 *             z = Vector(self)
 *             z.thisptr.idiv(float(other))             # <<<<<<<<<<<<<<
 *         return z
 * 
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_v_other);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_other);
    __Pyx_GIVEREF(__pyx_v_other);
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)&PyFloat_Type)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_z->thisptr->operator/=(__pyx_t_4);
  }
  __pyx_L5:;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":258
 *             z = Vector(self)
 *             z.thisptr.idiv(float(other))
 *         return z             # <<<<<<<<<<<<<<
 * 
 *     def __neg__(Vector self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_z));
  __pyx_r = ((PyObject *)__pyx_v_z);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("svector.Vector.__div__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_x);
  __Pyx_DECREF((PyObject *)__pyx_v_y);
  __Pyx_DECREF((PyObject *)__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":260
 *         return z
 * 
 *     def __neg__(Vector self):             # <<<<<<<<<<<<<<
 *         cdef Vector z = Vector(self)
 *         z.thisptr.imul(-1)
 */

static PyObject *__pyx_pf_7svector_6Vector___neg__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___neg__(PyObject *__pyx_v_self) {
  struct __pyx_obj_7svector_Vector *__pyx_v_z = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__neg__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":261
 * 
 *     def __neg__(Vector self):
 *         cdef Vector z = Vector(self)             # <<<<<<<<<<<<<<
 *         z.thisptr.imul(-1)
 *         return z
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":262
 *     def __neg__(Vector self):
 *         cdef Vector z = Vector(self)
 *         z.thisptr.imul(-1)             # <<<<<<<<<<<<<<
 *         return z
 * 
 */
  __pyx_v_z->thisptr->operator*=(-1);

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":263
 *         cdef Vector z = Vector(self)
 *         z.thisptr.imul(-1)
 *         return z             # <<<<<<<<<<<<<<
 * 
 *     def __pos__(Vector self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_z));
  __pyx_r = ((PyObject *)__pyx_v_z);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.__neg__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":265
 *         return z
 * 
 *     def __pos__(Vector self):             # <<<<<<<<<<<<<<
 *         cdef Vector z = Vector(self)
 *         return z
 */

static PyObject *__pyx_pf_7svector_6Vector___pos__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector___pos__(PyObject *__pyx_v_self) {
  struct __pyx_obj_7svector_Vector *__pyx_v_z = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__pos__");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":266
 * 
 *     def __pos__(Vector self):
 *         cdef Vector z = Vector(self)             # <<<<<<<<<<<<<<
 *         return z
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self);
  __Pyx_GIVEREF(__pyx_v_self);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7svector_Vector)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_7svector_Vector))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_z = ((struct __pyx_obj_7svector_Vector *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":267
 *     def __pos__(Vector self):
 *         cdef Vector z = Vector(self)
 *         return z             # <<<<<<<<<<<<<<
 * 
 *     def dot(Vector self, Vector other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_z));
  __pyx_r = ((PyObject *)__pyx_v_z);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("svector.Vector.__pos__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_z);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":269
 *         return z
 * 
 *     def dot(Vector self, Vector other):             # <<<<<<<<<<<<<<
 *         return self.thisptr.dot(other.thisptr[0])
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector_dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector_dot(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("dot");
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7svector_Vector, 1, "other", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":270
 * 
 *     def dot(Vector self, Vector other):
 *         return self.thisptr.dot(other.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *     def norm(Vector self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->dot((((struct __pyx_obj_7svector_Vector *)__pyx_v_other)->thisptr[0]))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("svector.Vector.dot");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/auto/nlg-01/chiangd/svector/svector.pyx":272
 *         return self.thisptr.dot(other.thisptr[0])
 * 
 *     def norm(Vector self):             # <<<<<<<<<<<<<<
 *         return sqrt(self.thisptr.normsquared())
 * 
 */

static PyObject *__pyx_pf_7svector_6Vector_norm(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_7svector_6Vector_norm(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("norm");

  /* "/auto/nlg-01/chiangd/svector/svector.pyx":273
 * 
 *     def norm(Vector self):
 *         return sqrt(self.thisptr.normsquared())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(std::sqrt(((struct __pyx_obj_7svector_Vector *)__pyx_v_self)->thisptr->normsquared())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("svector.Vector.norm");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7svector_Vector(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_7svector_Vector(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_7svector_6Vector___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_7svector_Vector(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_7svector_Vector(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pf_7svector_6Vector___setitem__(o, i, v);
  }
  else {
    return __pyx_pf_7svector_6Vector___delitem__(o, i);
  }
}

static struct PyMethodDef __pyx_methods_7svector_Vector[] = {
  {__Pyx_NAMESTR("__copy__"), (PyCFunction)__pyx_pf_7svector_6Vector___copy__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pf_7svector_6Vector___str__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__pyx_pf_7svector_6Vector___reduce__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__getitem__"), (PyCFunction)__pyx_pf_7svector_6Vector___getitem__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pf_7svector_6Vector___iter__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("iterkeys"), (PyCFunction)__pyx_pf_7svector_6Vector_iterkeys, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("itervalues"), (PyCFunction)__pyx_pf_7svector_6Vector_itervalues, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("iteritems"), (PyCFunction)__pyx_pf_7svector_6Vector_iteritems, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__iadd__"), (PyCFunction)__pyx_pf_7svector_6Vector___iadd__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__isub__"), (PyCFunction)__pyx_pf_7svector_6Vector___isub__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__imul__"), (PyCFunction)__pyx_pf_7svector_6Vector___imul__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__idiv__"), (PyCFunction)__pyx_pf_7svector_6Vector___idiv__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__add__"), (PyCFunction)__pyx_pf_7svector_6Vector___add__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__sub__"), (PyCFunction)__pyx_pf_7svector_6Vector___sub__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__mul__"), (PyCFunction)__pyx_pf_7svector_6Vector___mul__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__div__"), (PyCFunction)__pyx_pf_7svector_6Vector___div__, METH_O|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__neg__"), (PyCFunction)__pyx_pf_7svector_6Vector___neg__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__pos__"), (PyCFunction)__pyx_pf_7svector_6Vector___pos__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("dot"), (PyCFunction)__pyx_pf_7svector_6Vector_dot, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("norm"), (PyCFunction)__pyx_pf_7svector_6Vector_norm, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Vector = {
  __pyx_pf_7svector_6Vector___add__, /*nb_add*/
  __pyx_pf_7svector_6Vector___sub__, /*nb_subtract*/
  __pyx_pf_7svector_6Vector___mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pf_7svector_6Vector___div__, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  __pyx_pf_7svector_6Vector___neg__, /*nb_negative*/
  __pyx_pf_7svector_6Vector___pos__, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  __pyx_pf_7svector_6Vector___iadd__, /*nb_inplace_add*/
  __pyx_pf_7svector_6Vector___isub__, /*nb_inplace_subtract*/
  __pyx_pf_7svector_6Vector___imul__, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  __pyx_pf_7svector_6Vector___idiv__, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Vector = {
  __pyx_pf_7svector_6Vector___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7svector_Vector, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pf_7svector_6Vector___contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Vector = {
  __pyx_pf_7svector_6Vector___len__, /*mp_length*/
  __pyx_pf_7svector_6Vector___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_7svector_Vector, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Vector = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_7svector_Vector = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("svector.Vector"), /*tp_name*/
  sizeof(struct __pyx_obj_7svector_Vector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7svector_Vector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_Vector, /*tp_as_number*/
  &__pyx_tp_as_sequence_Vector, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Vector, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_7svector_6Vector___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Vector, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_7svector_6Vector___iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7svector_Vector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_7svector_6Vector___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7svector_Vector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_7svector_KeyIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7svector_KeyIterator *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7svector_KeyIterator *)o);
  p->v = ((struct __pyx_obj_7svector_Vector *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_7svector_11KeyIterator___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7svector_KeyIterator(PyObject *o) {
  struct __pyx_obj_7svector_KeyIterator *p = (struct __pyx_obj_7svector_KeyIterator *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_7svector_11KeyIterator___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->v));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7svector_KeyIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7svector_KeyIterator *p = (struct __pyx_obj_7svector_KeyIterator *)o;
  if (p->v) {
    e = (*v)(((PyObject*)p->v), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7svector_KeyIterator(PyObject *o) {
  struct __pyx_obj_7svector_KeyIterator *p = (struct __pyx_obj_7svector_KeyIterator *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->v);
  p->v = ((struct __pyx_obj_7svector_Vector *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_7svector_KeyIterator[] = {
  {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pf_7svector_11KeyIterator___iter__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pf_7svector_11KeyIterator___next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_KeyIterator = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_KeyIterator = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_KeyIterator = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_KeyIterator = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_7svector_KeyIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("svector.KeyIterator"), /*tp_name*/
  sizeof(struct __pyx_obj_7svector_KeyIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7svector_KeyIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_KeyIterator, /*tp_as_number*/
  &__pyx_tp_as_sequence_KeyIterator, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_KeyIterator, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_KeyIterator, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7svector_KeyIterator, /*tp_traverse*/
  __pyx_tp_clear_7svector_KeyIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_7svector_11KeyIterator___iter__, /*tp_iter*/
  __pyx_pf_7svector_11KeyIterator___next__, /*tp_iternext*/
  __pyx_methods_7svector_KeyIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7svector_KeyIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_7svector_ValueIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7svector_ValueIterator *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7svector_ValueIterator *)o);
  p->v = ((struct __pyx_obj_7svector_Vector *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_7svector_13ValueIterator___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7svector_ValueIterator(PyObject *o) {
  struct __pyx_obj_7svector_ValueIterator *p = (struct __pyx_obj_7svector_ValueIterator *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_7svector_13ValueIterator___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->v));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7svector_ValueIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7svector_ValueIterator *p = (struct __pyx_obj_7svector_ValueIterator *)o;
  if (p->v) {
    e = (*v)(((PyObject*)p->v), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7svector_ValueIterator(PyObject *o) {
  struct __pyx_obj_7svector_ValueIterator *p = (struct __pyx_obj_7svector_ValueIterator *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->v);
  p->v = ((struct __pyx_obj_7svector_Vector *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_7svector_ValueIterator[] = {
  {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pf_7svector_13ValueIterator___iter__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pf_7svector_13ValueIterator___next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ValueIterator = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_ValueIterator = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_ValueIterator = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_ValueIterator = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_7svector_ValueIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("svector.ValueIterator"), /*tp_name*/
  sizeof(struct __pyx_obj_7svector_ValueIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7svector_ValueIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_ValueIterator, /*tp_as_number*/
  &__pyx_tp_as_sequence_ValueIterator, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_ValueIterator, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_ValueIterator, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7svector_ValueIterator, /*tp_traverse*/
  __pyx_tp_clear_7svector_ValueIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_7svector_13ValueIterator___iter__, /*tp_iter*/
  __pyx_pf_7svector_13ValueIterator___next__, /*tp_iternext*/
  __pyx_methods_7svector_ValueIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7svector_ValueIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_7svector_KeyValueIterator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7svector_KeyValueIterator *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_7svector_KeyValueIterator *)o);
  p->v = ((struct __pyx_obj_7svector_Vector *)Py_None); Py_INCREF(Py_None);
  if (__pyx_pf_7svector_16KeyValueIterator___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7svector_KeyValueIterator(PyObject *o) {
  struct __pyx_obj_7svector_KeyValueIterator *p = (struct __pyx_obj_7svector_KeyValueIterator *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_7svector_16KeyValueIterator___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(((PyObject *)p->v));
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7svector_KeyValueIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7svector_KeyValueIterator *p = (struct __pyx_obj_7svector_KeyValueIterator *)o;
  if (p->v) {
    e = (*v)(((PyObject*)p->v), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7svector_KeyValueIterator(PyObject *o) {
  struct __pyx_obj_7svector_KeyValueIterator *p = (struct __pyx_obj_7svector_KeyValueIterator *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->v);
  p->v = ((struct __pyx_obj_7svector_Vector *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_7svector_KeyValueIterator[] = {
  {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pf_7svector_16KeyValueIterator___iter__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pf_7svector_16KeyValueIterator___next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_KeyValueIterator = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_KeyValueIterator = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_KeyValueIterator = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_KeyValueIterator = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_7svector_KeyValueIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("svector.KeyValueIterator"), /*tp_name*/
  sizeof(struct __pyx_obj_7svector_KeyValueIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7svector_KeyValueIterator, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_KeyValueIterator, /*tp_as_number*/
  &__pyx_tp_as_sequence_KeyValueIterator, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_KeyValueIterator, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_KeyValueIterator, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_7svector_KeyValueIterator, /*tp_traverse*/
  __pyx_tp_clear_7svector_KeyValueIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pf_7svector_16KeyValueIterator___iter__, /*tp_iter*/
  __pyx_pf_7svector_16KeyValueIterator___next__, /*tp_iternext*/
  __pyx_methods_7svector_KeyValueIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7svector_KeyValueIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static struct PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("svector"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp___main__, __pyx_k___main__, sizeof(__pyx_k___main__), 1, 1, 1},
  {&__pyx_kp___cinit__, __pyx_k___cinit__, sizeof(__pyx_k___cinit__), 1, 1, 1},
  {&__pyx_kp___dealloc__, __pyx_k___dealloc__, sizeof(__pyx_k___dealloc__), 1, 1, 1},
  {&__pyx_kp___iter__, __pyx_k___iter__, sizeof(__pyx_k___iter__), 1, 1, 1},
  {&__pyx_kp___next__, __pyx_k___next__, sizeof(__pyx_k___next__), 1, 1, 1},
  {&__pyx_kp___init__, __pyx_k___init__, sizeof(__pyx_k___init__), 1, 1, 1},
  {&__pyx_kp___copy__, __pyx_k___copy__, sizeof(__pyx_k___copy__), 1, 1, 1},
  {&__pyx_kp___str__, __pyx_k___str__, sizeof(__pyx_k___str__), 1, 1, 1},
  {&__pyx_kp___reduce__, __pyx_k___reduce__, sizeof(__pyx_k___reduce__), 1, 1, 1},
  {&__pyx_kp___len__, __pyx_k___len__, sizeof(__pyx_k___len__), 1, 1, 1},
  {&__pyx_kp___setitem__, __pyx_k___setitem__, sizeof(__pyx_k___setitem__), 1, 1, 1},
  {&__pyx_kp___getitem__, __pyx_k___getitem__, sizeof(__pyx_k___getitem__), 1, 1, 1},
  {&__pyx_kp___delitem__, __pyx_k___delitem__, sizeof(__pyx_k___delitem__), 1, 1, 1},
  {&__pyx_kp_iterkeys, __pyx_k_iterkeys, sizeof(__pyx_k_iterkeys), 1, 1, 1},
  {&__pyx_kp_itervalues, __pyx_k_itervalues, sizeof(__pyx_k_itervalues), 1, 1, 1},
  {&__pyx_kp_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 1, 1, 1},
  {&__pyx_kp___contains__, __pyx_k___contains__, sizeof(__pyx_k___contains__), 1, 1, 1},
  {&__pyx_kp___iadd__, __pyx_k___iadd__, sizeof(__pyx_k___iadd__), 1, 1, 1},
  {&__pyx_kp___isub__, __pyx_k___isub__, sizeof(__pyx_k___isub__), 1, 1, 1},
  {&__pyx_kp___imul__, __pyx_k___imul__, sizeof(__pyx_k___imul__), 1, 1, 1},
  {&__pyx_kp___idiv__, __pyx_k___idiv__, sizeof(__pyx_k___idiv__), 1, 1, 1},
  {&__pyx_kp___add__, __pyx_k___add__, sizeof(__pyx_k___add__), 1, 1, 1},
  {&__pyx_kp___sub__, __pyx_k___sub__, sizeof(__pyx_k___sub__), 1, 1, 1},
  {&__pyx_kp___mul__, __pyx_k___mul__, sizeof(__pyx_k___mul__), 1, 1, 1},
  {&__pyx_kp___div__, __pyx_k___div__, sizeof(__pyx_k___div__), 1, 1, 1},
  {&__pyx_kp___neg__, __pyx_k___neg__, sizeof(__pyx_k___neg__), 1, 1, 1},
  {&__pyx_kp___pos__, __pyx_k___pos__, sizeof(__pyx_k___pos__), 1, 1, 1},
  {&__pyx_kp_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 1, 1, 1},
  {&__pyx_kp_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 1, 1, 1},
  {&__pyx_kp_v, __pyx_k_v, sizeof(__pyx_k_v), 1, 1, 1},
  {&__pyx_kp_f, __pyx_k_f, sizeof(__pyx_k_f), 1, 1, 1},
  {&__pyx_kp_x, __pyx_k_x, sizeof(__pyx_k_x), 1, 1, 1},
  {&__pyx_kp_other, __pyx_k_other, sizeof(__pyx_k_other), 1, 1, 1},
  {&__pyx_kp_self, __pyx_k_self, sizeof(__pyx_k_self), 1, 1, 1},
  {&__pyx_kp_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 1, 1, 1},
  {&__pyx_kp_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 1, 1, 1},
  {0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_StopIteration = __Pyx_GetName(__pyx_b, __pyx_kp_StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_kp_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initsvector(void); /*proto*/
PyMODINIT_FUNC initsvector(void)
#else
PyMODINIT_FUNC PyInit_svector(void); /*proto*/
PyMODINIT_FUNC PyInit_svector(void)
#endif
{
  #ifdef CYTHON_REFNANNY
  void* __pyx_refchk = NULL;
  __Pyx_Refnanny = __Pyx_ImportRefcountAPI("refnanny");
  if (!__Pyx_Refnanny) {
      PyErr_Clear();
      __Pyx_Refnanny = __Pyx_ImportRefcountAPI("Cython.Runtime.refnanny");
      if (!__Pyx_Refnanny)
          Py_FatalError("failed to import refnanny module");
  }
  __pyx_refchk = __Pyx_Refnanny->NewContext("PyMODINIT_FUNC PyInit_svector(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Library function declarations ---*/
  __pyx_init_filenames();
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("svector"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__pyx_module_is_main_svector) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_kp___main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_skip_dispatch = 0;
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7svector_Vector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Vector", (PyObject *)&__pyx_type_7svector_Vector) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7svector_Vector = &__pyx_type_7svector_Vector;
  if (PyType_Ready(&__pyx_type_7svector_KeyIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "KeyIterator", (PyObject *)&__pyx_type_7svector_KeyIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7svector_KeyIterator = &__pyx_type_7svector_KeyIterator;
  if (PyType_Ready(&__pyx_type_7svector_ValueIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "ValueIterator", (PyObject *)&__pyx_type_7svector_ValueIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7svector_ValueIterator = &__pyx_type_7svector_ValueIterator;
  if (PyType_Ready(&__pyx_type_7svector_KeyValueIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "KeyValueIterator", (PyObject *)&__pyx_type_7svector_KeyValueIterator) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7svector_KeyValueIterator = &__pyx_type_7svector_KeyValueIterator;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/auto/nlg-01/chiangd/svector/numberizer.pxd":1
 * cdef extern from "string":             # <<<<<<<<<<<<<<
 *     ctypedef struct c_string "std::string"
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("svector");
  Py_DECREF(__pyx_m); __pyx_m = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "svector.pyx",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}


static int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (obj == Py_None || PyObject_TypeCheck(obj, type))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %s to %s",
        Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

#if PY_MAJOR_VERSION >= 3
    /* Note: this is a temporary work-around to prevent crashes in Python 3.0 */
    if ((tstate->exc_type != NULL) & (tstate->exc_type != Py_None)) {
        tmp_type = tstate->exc_type;
        tmp_value = tstate->exc_value;
        tmp_tb = tstate->exc_traceback;
        PyErr_NormalizeException(&type, &value, &tb);
        PyErr_NormalizeException(&tmp_type, &tmp_value, &tmp_tb);
        tstate->exc_type = 0;
        tstate->exc_value = 0;
        tstate->exc_traceback = 0;
        PyException_SetContext(value, tmp_value);
        Py_DECREF(tmp_type);
        Py_XDECREF(tmp_tb);
    }
#endif

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


static INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
                 "need more than %d value%s to unpack", (int)index,
        #else
                 "need more than %zd value%s to unpack", index,
        #endif
                 (index == 1) ? "" : "s");
}

static INLINE void __Pyx_RaiseTooManyValuesError(void) {
    PyErr_SetString(PyExc_ValueError, "too many values to unpack");
}

static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {
    PyObject *item;
    if (!(item = PyIter_Next(iter))) {
        if (!PyErr_Occurred()) {
            __Pyx_RaiseNeedMoreValuesError(index);
        }
    }
    return item;
}

static int __Pyx_EndUnpack(PyObject *iter) {
    PyObject *item;
    if ((item = PyIter_Next(iter))) {
        Py_DECREF(item);
        __Pyx_RaiseTooManyValuesError();
        return -1;
    }
    else if (!PyErr_Occurred())
        return 0;
    else
        return -1;
}

static INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned char)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned char");
                return (unsigned char)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned char");
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned short)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned short");
                return (unsigned short)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned short");
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned int)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned int");
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to char");
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to short");
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to int");
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed char");
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed short");
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed int");
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return PyLong_AsUnsignedLong(x);
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return PyLong_AsUnsignedLongLong(x);
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyObject *empty_string = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    #if PY_MAJOR_VERSION < 3
    empty_string = PyString_FromStringAndSize("", 0);
    #else
    empty_string = PyBytes_FromStringAndSize("", 0);
    #endif
    if (!empty_string) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        empty_string, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        empty_string  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(empty_string);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode && (!t->is_identifier)) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_identifier || (t->is_unicode && t->intern)) {
            *t->p = PyUnicode_InternFromString(t->s);
        } else if (t->is_unicode) {
            *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if ((x == Py_False) | (x == Py_None)) return 0;
   else return PyObject_IsTrue(x);
}

static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


